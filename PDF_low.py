import numpy as np
from scipy.io import loadmat
from sklearn.neighbors import KernelDensity
from scipy.stats import entropy
from joblib import Parallel, delayed
import time
import scipy.io

# 加载数据
plain_data = scipy.io.loadmat('plain_low.mat')
leakage_data = scipy.io.loadmat('leakage_low.mat')

# 确保数据在0到255范围内
plain = plain_data['plain'].flatten()
leakage = leakage_data['leakage']

# AES S盒
sbox = np.array([
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
])

# 汉明重量函数
def hamming_weight(n):
    return bin(n).count("1")

# 构建假设功耗函数
def hypothetical_leakage(plain, key_guess):
    intermediate_value = sbox[plain ^ key_guess]
    hypothetical = np.vectorize(hamming_weight)(intermediate_value)
    return hypothetical

# 使用核密度估计估计PDF
def estimate_pdf(data):
    kde = KernelDensity(kernel='gaussian', bandwidth=1.0).fit(data[:, None])
    log_density = kde.score_samples(data[:, None])
    return np.exp(log_density)

# 计算密钥猜测的分数
def compute_score(plain, leakage, key_guess):
    hypothetical = hypothetical_leakage(plain, key_guess)
    hypothetical_pdf = estimate_pdf(hypothetical)
    actual_pdf = estimate_pdf(leakage[:, 0])  # 选择泄漏数据的第一个特征进行估计
    score = -entropy(actual_pdf, hypothetical_pdf)  # 使用KL散度计算分数
    return score

# 恢复密钥字节函数
def pdf_attack(plain, leakage):
    num_guesses = 256
    scores = Parallel(n_jobs=-1)(delayed(compute_score)(plain, leakage, key_guess) for key_guess in range(num_guesses))
    best_guess = np.argmax(scores)
    return best_guess

# 数据处理函数
def prepare_samples(m, n):
    num = m * n

    # 随机选择m个不同的明文
    selected_plain_values = np.random.choice(np.arange(256), m, replace=False)

    # 初始化样本矩阵
    plain_sample = np.zeros((m * n,), dtype=np.uint8)
    leakage_sample = np.zeros((m * n, leakage.shape[1]))

    # 生成对应的leakage样本
    for i in range(m):
        value = selected_plain_values[i]
        indices = np.where(plain == value)[0]
        selected_indices = np.random.choice(indices, n, replace=False)
        plain_sample[i*n:(i+1)*n] = plain[selected_indices]
        leakage_sample[i*n:(i+1)*n, :] = leakage[selected_indices, :]

    return plain_sample, leakage_sample

# 定义攻击函数
def perform_attack(m, n):
    plain_sample, leakage_sample = prepare_samples(m, n)
    guessed_key = pdf_attack(plain_sample, leakage_sample)
    return guessed_key

# 定义攻击次数和成功率计算
def evaluate_attack(num_attacks, correct_key, m, n):
    successful_attacks = 0
    attack_times = []
    for _ in range(num_attacks):
        start_time = time.time()
        guessed_key = perform_attack(m, n)
        attack_time = time.time() - start_time
        attack_times.append(attack_time)

        if guessed_key == correct_key:
            successful_attacks += 1

    success_rate = successful_attacks / num_attacks
    avg_attack_time = np.mean(attack_times)

    return success_rate, avg_attack_time

# 执行PDF攻击（低噪声）
num_attacks = 1000  # 设定攻击次数
m = 92
n = 3
correct_key = 114
success_rate, avg_attack_time = evaluate_attack(num_attacks, correct_key, m, n)
print(f'成功率: {success_rate * 100:.2f}%')
print(f'平均攻击时间: {avg_attack_time:.4f} 秒')